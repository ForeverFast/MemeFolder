<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:t="clr-namespace:MemeFolder.Domain.Models;assembly=MemeFolder.Domain"
                    xmlns:ia="clr-namespace:MemeFolder.Services.ImageAsyncService"
                    
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
                    xmlns:cn="clr-namespace:MemeFolder.Converters"
                    
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    
                    mc:Ignorable="po"
                    xmlns:local="clr-namespace:MemeFolder.Styles.Default.Dictionaries">

    <cn:ObjectToTypeConverter x:Key="ObjToType"/>
    <cn:ImageAsyncToContentTypeConverter x:Key="ImageAsyncToContentType"/>
    <cn:BitmapImageToImageSourceConverter x:Key="BItoIS"/>
    
    <ControlTemplate x:Key="LBI_Folder" TargetType="{x:Type ListBoxItem}">
        <Border Name="Border"
                Height="110" Width="110"
                Background="{TemplateBinding Background}"
                Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                              AncestorType={x:Type ListBox}},
                              Path=DataContext}">
            
            <Border.InputBindings>
                <MouseBinding Gesture="LeftDoubleClick"
                              Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                            AncestorType={x:Type ListBox}},
                                         Path=DataContext.NavigationToFolderCommand}"
                              CommandParameter="{Binding}"/>
            </Border.InputBindings>

            <Border.ContextMenu>
                <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                    <MenuItem Header="Открыть"
                              Command="{Binding Tag.NavigationToFolderCommand}"
                              CommandParameter="{Binding DataContext}"/>
                    <MenuItem Header="Переименовать"
                              Command="{Binding Tag.OpenEditTitleCommand}"/>
                    <MenuItem Header="Удалить" 
                              Command="{Binding Tag.RemoveFolderCommand}"
                              CommandParameter="{Binding DataContext}"/>
                </ContextMenu>
            </Border.ContextMenu>

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="80"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <md:PackIcon Kind="Folder" Grid.Row="0"
                            Foreground="{DynamicResource GrayLVL0}"
                            Height="100" Width="100"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>

                <TextBlock Grid.Row="1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top"
                                       FontStretch="Condensed"             
                            Text="{Binding Title}"
                            Foreground="{DynamicResource StandartLightColor}"
                            FontSize="16"/>

                <TextBox Name="TextBoxEdit" Grid.Row="1" Background="White"
                         Text="{Binding Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">

                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="Visibility" Value="Hidden"/>
                            <Style.Triggers>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsSelected}" Value="False"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBox}},
                                                                Path=DataContext.IsOpenForEditTitle}" Value="False"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsFocused}" Value="False"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </MultiDataTrigger.Setters>

                                </MultiDataTrigger>


                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsSelected}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBox}},
                                                                Path=DataContext.IsOpenForEditTitle}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsFocused}" Value="True"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=TextBoxEdit}"/>
                                    </MultiDataTrigger.Setters>

                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsSelected}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBox}},
                                                                Path=DataContext.IsOpenForEditTitle}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self},
                                                                Path=IsFocused}" Value="True"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"/>

                                    </MultiDataTrigger.Setters>

                                </MultiDataTrigger>

                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>


                </TextBox>

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="FocusManager.LostFocus" SourceName="TextBoxEdit">
                        <i:InvokeCommandAction  Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                      AncestorType={x:Type ListBox}},
                                                                      Path=DataContext.CloseEditTitleCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>


            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="LBI_Meme" TargetType="{x:Type ListBoxItem}">
        <Border Name="Border"
                Height="110" Width="110"
                Background="{TemplateBinding Background}"
                Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                              AncestorType={x:Type ListBox}},
                              Path=DataContext}">
            <Border.InputBindings>
                
                <MouseBinding Gesture="LeftDoubleClick"
                              Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                            AncestorType={x:Type ListBox}},
                                         Path=DataContext.OpenMemePictureCommand}"
                              CommandParameter="{Binding}"/>
                <MouseBinding Gesture="LeftClick"
                              Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                            AncestorType={x:Type ListBox}},
                                         Path=DataContext.CopyMemeInBufferCommand}"
                              CommandParameter="{Binding}"/> 
                
            </Border.InputBindings>

            <Border.ContextMenu>
                <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                    
                    <MenuItem Header="Открыть"
                              Command="{Binding Tag.OpenMemePictureCommand}"
                              CommandParameter="{Binding DataContext}"/>
                    <MenuItem Header="Переименовать"
                              Command="{Binding Tag.OpenEditTitleCommand}"/>
                    <MenuItem Header="Удалить" 
                              Command="{Binding Tag.RemoveMemeCommand}"
                              CommandParameter="{Binding DataContext}"/>

                </ContextMenu>
            </Border.ContextMenu>

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="80"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <!--, Converter={StaticResource BItoIS}-->
                <Image Grid.Row="0" Source="{Binding Image, Mode=OneTime}">
                    <!--<Image.Style>
                        <Style TargetType="Image">

                            <Style.Triggers>
                                <Trigger Property="IsVisible" Value="True">
                                    <Setter Property="Source" Value="{Binding Image}"/>
                                </Trigger>
                                <Trigger Property="IsVisible" Value="False">
                                    <Setter Property="Source" Value="{x:Null}"/>
                                </Trigger>

                            </Style.Triggers>
                        </Style>
                    </Image.Style>-->
                    <!--<Image.Source>
                        <BitmapImage UriSource="{Binding ImagePath}"
                                     CacheOption="None"
                                     CreateOptions="IgnoreImageCache"
                                     DecodePixelWidth="120"/>
                    </Image.Source>-->
                </Image>

                <!--<TextBlock Name="TextBlock" Grid.Row="1"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top"
                                                   
                            
                            TextTrimming="WordEllipsis"
                            Text="{Binding Title}"
                            Foreground="{DynamicResource StandartLightColor}"
                            FontSize="18"/>-->

                
                <Canvas Name="Canvas" Grid.Row="1"
                                                ClipToBounds="True">
                    <TextBlock Padding="0"
                               Canvas.Left="5"
                               Canvas.Top="6"
                                                       
                                                       
                               FontSize="15"
                               Foreground="{DynamicResource StandartTextColor}"
                               TextTrimming="WordEllipsis"
                               Text="{Binding Title}">
                        

                        <TextBlock.Triggers>
                            <EventTrigger RoutedEvent="TextBlock.MouseEnter">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" From="5" To="-100" 
                                                                                     Duration="0:0:10" RepeatBehavior="Forever"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="TextBlock.MouseLeave">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" To="5" 
                                                                                     Duration="0:0:0"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </TextBlock.Triggers>
                    </TextBlock>
                </Canvas>


                <TextBox Name="TextBoxEdit" Grid.Row="1" Background="White"
                         Text="{Binding Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    
                    <TextBox.Style>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="Visibility" Value="Hidden"/>
                            <Style.Triggers>
                              
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsSelected}" Value="False"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBox}},
                                                                Path=DataContext.IsOpenForEditTitle}" Value="False"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsFocused}" Value="False"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Hidden"/>
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=TextBoxEdit}"/>
                                    </MultiDataTrigger.Setters>

                                </MultiDataTrigger>


                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsSelected}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBox}},
                                                                Path=DataContext.IsOpenForEditTitle}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsFocused}" Value="True"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=TextBoxEdit}"/>
                                    </MultiDataTrigger.Setters>

                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBoxItem}},
                                                                Path=IsSelected}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                AncestorType={x:Type ListBox}},
                                                                Path=DataContext.IsOpenForEditTitle}" Value="True"/>
                                        <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self},
                                                                Path=IsFocused}" Value="True"/>
                                    </MultiDataTrigger.Conditions>

                                    <MultiDataTrigger.Setters>
                                        <Setter Property="Visibility" Value="Visible"/>

                                    </MultiDataTrigger.Setters>

                                </MultiDataTrigger>
                                
                            </Style.Triggers>
                        </Style>
                    </TextBox.Style>
                    

                </TextBox>

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="FocusManager.LostFocus" SourceName="TextBoxEdit">
                        <i:InvokeCommandAction  Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                                      AncestorType={x:Type ListBox}},
                                                                      Path=DataContext.CloseEditTitleCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

            </Grid>

        </Border>

    </ControlTemplate>


    
    <Style x:Key="DefLB" TargetType="{x:Type ListBox}">

        <!--<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="True"/>-->

        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DimColorWithLowOpacity2}"/>

        <Setter Property="Background" Value="{DynamicResource Gor}"/>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Margin" Value="5"/>

                    <Setter Property="Background" Value="{x:Null}"/>

                    <Setter Property="Tag"
                            Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}},
                                            Path=DataContext}"/>
                    
                    
                    <Style.Triggers>

                        <!--<Trigger Property="IsHitTestVisible" Value="False">
                            <Setter Property="Template" Value="{x:Null}"/>
                        </Trigger>-->

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext,
                                                       Converter={StaticResource ObjToType}}" 
                                     Value="{x:Type t:Folder}">
                            <Setter Property="Template" Value="{StaticResource LBI_Folder}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=DataContext,
                                                       Converter={StaticResource ObjToType}}" 
                                     Value="{x:Type t:Meme}">
                            <Setter Property="Template" Value="{StaticResource LBI_Meme}"/>
                        </DataTrigger>

                       
                        
                        
                    </Style.Triggers>
                    
                </Style>
            </Setter.Value>
        </Setter>

        <!--<Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu DataContext="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.DataContext}">
                    <MenuItem Header="AddFolder" CommandTarget="{Binding Source={x:Reference Name=rootD}}"
                                                 Command="{x:Static md:DialogHost.OpenDialogCommand}"/>
                    <MenuItem Header="AddMeme" Command="{Binding AddMeme}"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>-->

    </Style>

</ResourceDictionary>